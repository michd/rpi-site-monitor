#!/bin/bash
# monitor

# Usage: `sudo ./monitor` (or run as root)
# You can add -v for some logging, -vv for also logging which LEDs are being
# used.
# Ctrl-C to exit.
# To launch it into the background: `sudo ./monitor &`

#################################################
##### Don't change anything below this line #####
#################################################

cleanup () {
	echo "Exiting..."

	# Turn the LEDs off
	_i=0
	for _j in "${led_g[@]}"; do
		python indicate.py ${led_g[$_i]} ${led_r[$_i]} off
		_i=$_i+1
	done;

	exit
}

# Ensure we run cleanup before exiting with ^C
trap "cleanup" SIGINT SIGTERM

verboseLog () {
	_level=$1
	_msg=$2
	
	if [ "$VERBOSE" = "-vv" ]; then
		echo $_msg
	elif [ "$VERBOSE" = "-v" ] && [ "$_level" = "1" ]; then
		echo $_msg
	fi
}

checkStatus () {
	_led_g=$1
	_led_r=$2
	_host=$3
	_url=$4

	verboseLog 2 "Using LED pins: Green: $_led_g Red: $_led_r"
	verboseLog 1 "Pinging $_host..."

	if [ "$(ping $_host -c 1 1>/dev/null 2>/dev/null && echo up || echo down)" = "up" ]; then
		verboseLog 1 "Got response."
		verboseLog 1 "Checking HTTP status of $_url..."
		
		_http_status="$(curl -sL -w %{http_code} --connect-timeout $curl_timeout $_url -o /dev/null)" 
		
		verboseLog 1 "Status: $_http_status"
		
		if [ "$_http_status" = "200" ] || [ "$_http_status" = "204" ]; then
			verboseLog 2 "Setting LED to green."
			python indicate.py $_led_r $_led_g off
			sleep 0.05
			python indicate.py $_led_r $_led_g green
		else
			verboseLog 2 "Setting LED to yellow."
			python indicate.py $_led_r $_led_g off
			sleep 0.05
			python indicate.py $_led_r $_led_g yellow
		fi
	else
		verboseLog 1 "No response / unknown host."
		verboseLog 2 "Setting LED to red."
		python indicate.py $_led_r $_led_g off
		sleep 0.05
		python indicate.py $_led_r $_led_g red
	fi
}

# Check for config file param
if [ -f "$1" ]; then
  CONFIG_FILE=$1
elif [ -f "$2" ]; then
  CONFIG_FILE=$2
else
  CONFIG_FILE="default.conf"
fi

# Check for verbose param
if [ "$1" = "-v" ] || [ "$1" = "-vv" ]; then
  VERBOSE=$1
elif [ "$2" = "-v" ] || [ "$2" = "-vv" ]; then
  VERBOSE=$2
fi

source "$CONFIG_FILE"

verboseLog 1 "Starting to check ${#host[@]} websites..."
verboseLog 1 "Using configuration from file $CONFIG_FILE"
verboseLog 1 "Waiting $interval seconds between checks"
verboseLog 1 ""

while :
do
	_i=0
	for _j in "${led_g[@]}"; do
		verboseLog 1 "-----"
		checkStatus ${led_g[$_i]} ${led_r[$_i]} ${host[$_i]} ${url[$_i]}
		_i=$_i+1
	done;
	verboseLog 1 "##########"
	verboseLog 1 ""
	sleep $interval
done

